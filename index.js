/*!
 * @lottie-animation-community/lottie-types - v1.2.0
 * Compiled Sun, 30 Mar 2025 09:21:16 UTC
 *
 * Generated by an automated process. DO NOT EDIT!
 *
 * Copyright 2022 Lottie Animation Community.
 *
 * Licensed under the MIT License,
 * You may obtain a copy of the License at:
 * https://github.com/lottie-animation-community/lottie-types/blob/main/LICENSE
 *
 * Type definitions for the Lottie animation format.
 * Definitions by: Aidos Sabit <https://github.com/aidosmf>.
 *
 * To report an issue with these types, please open a support ticket at:
 * https://github.com/lottie-animation-community/lottie-types/issues
 */
var BlendMode;
(function (BlendMode) {
  BlendMode.Normal = 0;
  BlendMode.Multiply = 1;
  BlendMode.Screen = 2;
  BlendMode.Overlay = 3;
  BlendMode.Darken = 4;
  BlendMode.Lighten = 5;
  BlendMode.ColorDodge = 6;
  BlendMode.ColorBurn = 7;
  BlendMode.HardLight = 8;
  BlendMode.SoftLight = 9;
  BlendMode.Difference = 10;
  BlendMode.Exclusion = 11;
  BlendMode.Hue = 12;
  BlendMode.Saturation = 13;
  BlendMode.Color = 14;
  BlendMode.Luminosity = 15;
  BlendMode.Add = 16;
  BlendMode.HardMix = 17;
  (function (VALUE) {
    VALUE.NORMAL = BlendMode.Normal;
    VALUE.MULTIPLY = BlendMode.Multiply;
    VALUE.SCREEN = BlendMode.Screen;
    VALUE.OVERLAY = BlendMode.Overlay;
    VALUE.DARKEN = BlendMode.Darken;
    VALUE.LIGHTEN = BlendMode.Lighten;
    VALUE.COLOR_DODGE = BlendMode.ColorDodge;
    VALUE.COLOR_BURN = BlendMode.ColorBurn;
    VALUE.HARD_LIGHT = BlendMode.HardLight;
    VALUE.SOFT_LIGHT = BlendMode.SoftLight;
    VALUE.DIFFERENCE = BlendMode.Difference;
    VALUE.EXCLUSION = BlendMode.Exclusion;
    VALUE.HUE = BlendMode.Hue;
    VALUE.SATURATION = BlendMode.Saturation;
    VALUE.COLOR = BlendMode.Color;
    VALUE.LUMINOSITY = BlendMode.Luminosity;
    VALUE.ADD = BlendMode.Add;
    VALUE.HARD_MIX = BlendMode.HardMix;
  })(BlendMode.VALUE || (BlendMode.VALUE = {}));
})(BlendMode || (BlendMode = {}));

var Composite;
(function (Composite) {
  Composite.Above = 1;
  Composite.Below = 2;
  (function (VALUE) {
    VALUE.ABOVE = Composite.Above;
    VALUE.BELOW = Composite.Below;
  })(Composite.VALUE || (Composite.VALUE = {}));
})(Composite || (Composite = {}));

var EffectValueType;
(function (EffectValueType) {
  EffectValueType.Slider = 0;
  EffectValueType.Angle = 1;
  EffectValueType.Color = 2;
  EffectValueType.Point = 3;
  EffectValueType.Checkbox = 4;
  EffectValueType.Ignored = 6;
  EffectValueType.Dropdown = 7;
  EffectValueType.Layer = 10;
  (function (VALUE) {
    VALUE.SLIDER = EffectValueType.Slider;
    VALUE.ANGLE = EffectValueType.Angle;
    VALUE.COLOR = EffectValueType.Color;
    VALUE.POINT = EffectValueType.Point;
    VALUE.CHECKBOX = EffectValueType.Checkbox;
    VALUE.IGNORED = EffectValueType.Ignored;
    VALUE.DROPDOWN = EffectValueType.Dropdown;
    VALUE.LAYER = EffectValueType.Layer;
  })(EffectValueType.VALUE || (EffectValueType.VALUE = {}));
})(EffectValueType || (EffectValueType = {}));

var EffectType;
(function (EffectType) {
  EffectType.Custom = 5;
  EffectType.PaintOverTransparent = 7;
  EffectType.Tint = 20;
  EffectType.Fill = 21;
  EffectType.Stroke = 22;
  EffectType.Tritone = 23;
  EffectType.ProLevels = 24;
  EffectType.DropShadow = 25;
  EffectType.RadialWipe = 26;
  EffectType.DisplacementMap = 27;
  EffectType.Matte3 = 28;
  EffectType.GaussianBlur = 29;
  EffectType.MeshWarp = 31;
  EffectType.Wavy = 32;
  EffectType.Spherize = 33;
  EffectType.Puppet = 34;
  (function (VALUE) {
    VALUE.CUSTOM = EffectType.Custom;
    VALUE.PAINT_OVER_TRANSPARENT = EffectType.PaintOverTransparent;
    VALUE.TINT = EffectType.Tint;
    VALUE.FILL = EffectType.Fill;
    VALUE.STROKE = EffectType.Stroke;
    VALUE.TRITONE = EffectType.Tritone;
    VALUE.PRO_LEVELS = EffectType.ProLevels;
    VALUE.DROP_SHADOW = EffectType.DropShadow;
    VALUE.RADIAL_WIPE = EffectType.RadialWipe;
    VALUE.DISPLACEMENT_MAP = EffectType.DisplacementMap;
    VALUE.MATTE3 = EffectType.Matte3;
    VALUE.GAUSSIAN_BLUR = EffectType.GaussianBlur;
    VALUE.MESH_WARP = EffectType.MeshWarp;
    VALUE.WAVY = EffectType.Wavy;
    VALUE.SPHERIZE = EffectType.Spherize;
    VALUE.PUPPET = EffectType.Puppet;
  })(EffectType.VALUE || (EffectType.VALUE = {}));
})(EffectType || (EffectType = {}));

var FillRule;
(function (FillRule) {
  FillRule.NonZero = 1;
  FillRule.EvenOdd = 2;
  (function (VALUE) {
    VALUE.NON_ZERO = FillRule.NonZero;
    VALUE.EVEN_ODD = FillRule.EvenOdd;
  })(FillRule.VALUE || (FillRule.VALUE = {}));
})(FillRule || (FillRule = {}));

var GradientType;
(function (GradientType) {
  GradientType.Linear = 1;
  GradientType.Radial = 2;
  (function (VALUE) {
    VALUE.LINEAR = GradientType.Linear;
    VALUE.RADIAL = GradientType.Radial;
  })(GradientType.VALUE || (GradientType.VALUE = {}));
})(GradientType || (GradientType = {}));

var LayerType;
(function (LayerType) {
  LayerType.Precomposition = 0;
  LayerType.SolidColor = 1;
  LayerType.Image = 2;
  LayerType.Null = 3;
  LayerType.Shape = 4;
  LayerType.Text = 5;
  LayerType.Audio = 6;
  LayerType.VideoPlaceholder = 7;
  LayerType.ImageSequence = 8;
  LayerType.Video = 9;
  LayerType.ImagePlaceholder = 10;
  LayerType.Guide = 11;
  LayerType.Adjustment = 12;
  LayerType.Camera = 13;
  LayerType.Light = 14;
  LayerType.Data = 15;
  (function (VALUE) {
    VALUE.PRECOMPOSITION = LayerType.Precomposition;
    VALUE.SOLID_COLOR = LayerType.SolidColor;
    VALUE.IMAGE = LayerType.Image;
    VALUE.NULL = LayerType.Null;
    VALUE.SHAPE = LayerType.Shape;
    VALUE.TEXT = LayerType.Text;
    VALUE.AUDIO = LayerType.Audio;
    VALUE.VIDEO_PLACEHOLDER = LayerType.VideoPlaceholder;
    VALUE.IMAGE_SEQUENCE = LayerType.ImageSequence;
    VALUE.VIDEO = LayerType.Video;
    VALUE.IMAGE_PLACEHOLDER = LayerType.ImagePlaceholder;
    VALUE.GUIDE = LayerType.Guide;
    VALUE.ADJUSTMENT = LayerType.Adjustment;
    VALUE.CAMERA = LayerType.Camera;
    VALUE.LIGHT = LayerType.Light;
    VALUE.DATA = LayerType.Data;
  })(LayerType.VALUE || (LayerType.VALUE = {}));
})(LayerType || (LayerType = {}));

var LineCap;
(function (LineCap) {
  LineCap.Butt = 1;
  LineCap.Round = 2;
  LineCap.Square = 3;
  (function (VALUE) {
    VALUE.BUTT = LineCap.Butt;
    VALUE.ROUND = LineCap.Round;
    VALUE.SQUARE = LineCap.Square;
  })(LineCap.VALUE || (LineCap.VALUE = {}));
})(LineCap || (LineCap = {}));

var LineJoin;
(function (LineJoin) {
  LineJoin.Miter = 1;
  LineJoin.Round = 2;
  LineJoin.Bevel = 3;
  (function (VALUE) {
    VALUE.MITER = LineJoin.Miter;
    VALUE.ROUND = LineJoin.Round;
    VALUE.BEVEL = LineJoin.Bevel;
  })(LineJoin.VALUE || (LineJoin.VALUE = {}));
})(LineJoin || (LineJoin = {}));

var MaskMode;
(function (MaskMode) {
  MaskMode.No = "n";
  MaskMode.Add = "a";
  MaskMode.Subtract = "s";
  MaskMode.Intersect = "i";
  MaskMode.Lighten = "l";
  MaskMode.Darken = "d";
  MaskMode.Difference = "f";
  (function (VALUE) {
    VALUE.NO = MaskMode.No;
    VALUE.ADD = MaskMode.Add;
    VALUE.SUBTRACT = MaskMode.Subtract;
    VALUE.INTERSECT = MaskMode.Intersect;
    VALUE.LIGHTEN = MaskMode.Lighten;
    VALUE.DARKEN = MaskMode.Darken;
    VALUE.DIFFERENCE = MaskMode.Difference;
  })(MaskMode.VALUE || (MaskMode.VALUE = {}));
})(MaskMode || (MaskMode = {}));

var MatteMode;
(function (MatteMode) {
  MatteMode.Normal = 0;
  MatteMode.Alpha = 1;
  MatteMode.InvertedAlpha = 2;
  MatteMode.Luma = 3;
  MatteMode.InvertedLuma = 4;
  (function (VALUE) {
    VALUE.NORMAL = MatteMode.Normal;
    VALUE.ALPHA = MatteMode.Alpha;
    VALUE.INVERTED_ALPHA = MatteMode.InvertedAlpha;
    VALUE.LUMA = MatteMode.Luma;
    VALUE.INVERTED_LUMA = MatteMode.InvertedLuma;
  })(MatteMode.VALUE || (MatteMode.VALUE = {}));
})(MatteMode || (MatteMode = {}));

var PolyStarType;
(function (PolyStarType) {
  PolyStarType.Star = 1;
  PolyStarType.Polygon = 2;
  (function (VALUE) {
    VALUE.STAR = PolyStarType.Star;
    VALUE.POLYGON = PolyStarType.Polygon;
  })(PolyStarType.VALUE || (PolyStarType.VALUE = {}));
})(PolyStarType || (PolyStarType = {}));

var ShapeDirection;
(function (ShapeDirection) {
  /**
   * Default Clockwise
   */
  ShapeDirection.Normal = 0;
  /**
   * Usually clockwise
   */
  ShapeDirection.Clockwise = 1;
  /**
   * Usually counter clockwise
   */
  ShapeDirection.ClockwiseReversed = 3;
  (function (VALUE) {
    VALUE.NORMAL = ShapeDirection.Normal;
    VALUE.CLOCKWISE = ShapeDirection.Clockwise;
    VALUE.CLOCKWISE_REVERSED = ShapeDirection.ClockwiseReversed;
  })(ShapeDirection.VALUE || (ShapeDirection.VALUE = {}));
})(ShapeDirection || (ShapeDirection = {}));

var ShapeType;
(function (ShapeType) {
  ShapeType.Rectangle = "rc";
  ShapeType.Ellipse = "el";
  ShapeType.PolygonStar = "sr";
  ShapeType.Path = "sh";
  ShapeType.Fill = "fl";
  ShapeType.Stroke = "st";
  ShapeType.GradientFill = "gf";
  ShapeType.GradientStroke = "gs";
  ShapeType.Group = "gr";
  ShapeType.Transform = "tr";
  ShapeType.RoundedCorners = "rd";
  ShapeType.PuckerBloat = "pb";
  ShapeType.Merge = "mm";
  ShapeType.Twist = "tw";
  ShapeType.OffsetPath = "op";
  ShapeType.ZigZag = "zz";
  ShapeType.Modifier = ""; // null
  ShapeType.Repeater = "rp";
  ShapeType.Trim = "tm";
  (function (VALUE) {
    VALUE.RECTANGLE = ShapeType.Rectangle;
    VALUE.ELLIPSE = ShapeType.Ellipse;
    VALUE.POLYGON_STAR = ShapeType.PolygonStar;
    VALUE.PATH = ShapeType.Path;
    VALUE.FILL = ShapeType.Fill;
    VALUE.STROKE = ShapeType.Stroke;
    VALUE.GRADIENT_FILL = ShapeType.GradientFill;
    VALUE.GRADIENT_STROKE = ShapeType.GradientStroke;
    VALUE.GROUP = ShapeType.Group;
    VALUE.TRANSFORM = ShapeType.Transform;
    VALUE.ROUNDED_CORNERS = ShapeType.RoundedCorners;
    VALUE.PUCKER_BLOAT = ShapeType.PuckerBloat;
    VALUE.MERGE = ShapeType.Merge;
    VALUE.TWIST = ShapeType.Twist;
    VALUE.OFFSET_PATH = ShapeType.OffsetPath;
    VALUE.ZIG_ZAG = ShapeType.ZigZag;
    VALUE.MODIFIER = ShapeType.Modifier;
    VALUE.REPEATER = ShapeType.Repeater;
    VALUE.TRIM = ShapeType.Trim;
  })(ShapeType.VALUE || (ShapeType.VALUE = {}));
})(ShapeType || (ShapeType = {}));

var StrokeDashType;
(function (StrokeDashType) {
  StrokeDashType.Default = "d";
  StrokeDashType.Gap = "g";
  StrokeDashType.Offset = "o";
  (function (VALUE) {
    VALUE.DEFAULT = StrokeDashType.Default;
    VALUE.GAP = StrokeDashType.Gap;
    VALUE.OFFSET = StrokeDashType.Offset;
  })(StrokeDashType.VALUE || (StrokeDashType.VALUE = {}));
})(StrokeDashType || (StrokeDashType = {}));

var TextType;
(function (TextType) {
  let Based;
  (function (Based) {
    Based.Characters = 1;
    Based.CharacterExcludingSpaces = 2;
    Based.Words = 3;
    Based.Lines = 4;
  })((Based = TextType.Based || (TextType.Based = {})));
  (function (BASED) {
    BASED.CHARACTERS = Based.Characters;
    BASED.CHARACTER_EXCLUDING_SPACES = Based.CharacterExcludingSpaces;
    BASED.WORDS = Based.Words;
    BASED.LINES = Based.Lines;
  })(TextType.BASED || (TextType.BASED = {}));
  let Caps;
  (function (Caps) {
    Caps.Regular = 0;
    Caps.AllCaps = 1;
    Caps.SmallCaps = 2;
  })((Caps = TextType.Caps || (TextType.Caps = {})));
  (function (TEXT_CAPS) {
    TEXT_CAPS.REGULAR = Caps.Regular;
    TEXT_CAPS.ALL_CAPS = Caps.AllCaps;
    TEXT_CAPS.SMALL_CAPS = Caps.SmallCaps;
  })(TextType.TEXT_CAPS || (TextType.TEXT_CAPS = {}));
  let Grouping;
  (function (Grouping) {
    Grouping.Characters = 1;
    Grouping.Word = 2;
    Grouping.Line = 3;
    Grouping.All = 4;
  })((Grouping = TextType.Grouping || (TextType.Grouping = {})));
  (function (GROUPING) {
    GROUPING.CHARACTERS = Grouping.Characters;
    GROUPING.WORD = Grouping.Word;
    GROUPING.LINE = Grouping.Line;
    GROUPING.ALL = Grouping.All;
  })(TextType.GROUPING || (TextType.GROUPING = {}));
  let Justify;
  (function (Justify) {
    Justify.Left = 0;
    Justify.Right = 1;
    Justify.Center = 2;
    Justify.WithLastLineLeft = 3;
    Justify.WithLastLineRight = 4;
    Justify.WithLastLineCenter = 5;
    Justify.WithLastLineFull = 6;
  })((Justify = TextType.Justify || (TextType.Justify = {})));
  (function (JUSTIFY) {
    JUSTIFY.LEFT = Justify.Left;
    JUSTIFY.RIGHT = Justify.Right;
    JUSTIFY.CENTER = Justify.Center;
    JUSTIFY.WITH_LAST_LINE_LEFT = Justify.WithLastLineLeft;
    JUSTIFY.WITH_LAST_LINE_RIGHT = Justify.WithLastLineRight;
    JUSTIFY.WITH_LAST_LINE_CENTER = Justify.WithLastLineCenter;
    JUSTIFY.WITH_LAST_LINE_FULL = Justify.WithLastLineFull;
  })(TextType.JUSTIFY || (TextType.JUSTIFY = {}));
  let Shape;
  (function (Shape) {
    Shape.Square = 1;
    Shape.RampUp = 2;
    Shape.RampDown = 3;
    Shape.Triangle = 4;
    Shape.Round = 5;
    Shape.Smooth = 6;
  })((Shape = TextType.Shape || (TextType.Shape = {})));
  (function (SHAPE) {
    SHAPE.SQUARE = Shape.Square;
    SHAPE.RAMP_UP = Shape.RampUp;
    SHAPE.RAMP_DOWN = Shape.RampDown;
    SHAPE.TRIANGLE = Shape.Triangle;
    SHAPE.ROUND = Shape.Round;
    SHAPE.SMOOTH = Shape.Smooth;
  })(TextType.SHAPE || (TextType.SHAPE = {}));
  let FontPathOrigin;
  (function (FontPathOrigin) {
    FontPathOrigin.Local = 0;
    FontPathOrigin.CssUrl = 1;
    FontPathOrigin.ScriptUrl = 2;
    FontPathOrigin.FontUrl = 3;
  })(
    (FontPathOrigin =
      TextType.FontPathOrigin || (TextType.FontPathOrigin = {})),
  );
  (function (FONT_PATH_ORIGIN) {
    FONT_PATH_ORIGIN.LOCAL = FontPathOrigin.Local;
    FONT_PATH_ORIGIN.CSS_URL = FontPathOrigin.CssUrl;
    FONT_PATH_ORIGIN.SCRIPT_URL = FontPathOrigin.ScriptUrl;
    FONT_PATH_ORIGIN.FONT_URL = FontPathOrigin.FontUrl;
  })(TextType.FONT_PATH_ORIGIN || (TextType.FONT_PATH_ORIGIN = {}));
  let VerticalJustify;
  (function (VerticalJustify) {
    VerticalJustify.Top = 0;
    VerticalJustify.Center = 1;
    VerticalJustify.Bottom = 2;
  })(
    (VerticalJustify =
      TextType.VerticalJustify || (TextType.VerticalJustify = {})),
  );
  (function (VERTICAL_JUSTIFY) {
    VERTICAL_JUSTIFY.TOP = VerticalJustify.Top;
    VERTICAL_JUSTIFY.CENTER = VerticalJustify.Center;
    VERTICAL_JUSTIFY.BOTTOM = VerticalJustify.Bottom;
  })(TextType.VERTICAL_JUSTIFY || (TextType.VERTICAL_JUSTIFY = {}));
  let RangeSelectorMode;
  (function (RangeSelectorMode) {
    RangeSelectorMode.Add = 0;
    RangeSelectorMode.Subtract = 1;
    RangeSelectorMode.Intersect = 2;
    RangeSelectorMode.Min = 3;
    RangeSelectorMode.Max = 4;
    RangeSelectorMode.Difference = 5;
  })(
    (RangeSelectorMode =
      TextType.RangeSelectorMode || (TextType.RangeSelectorMode = {})),
  );
  (function (RANGE_SELECTOR_MODE) {
    RANGE_SELECTOR_MODE.ADD = RangeSelectorMode.Add;
    RANGE_SELECTOR_MODE.SUBTRACT = RangeSelectorMode.Subtract;
    RANGE_SELECTOR_MODE.INTERSECT = RangeSelectorMode.Intersect;
    RANGE_SELECTOR_MODE.MIN = RangeSelectorMode.Min;
    RANGE_SELECTOR_MODE.MAX = RangeSelectorMode.Max;
    RANGE_SELECTOR_MODE.DIFFERENCE = RangeSelectorMode.Difference;
  })(TextType.RANGE_SELECTOR_MODE || (TextType.RANGE_SELECTOR_MODE = {}));
  /** @deprecated Use {@linkcode TextType.Based.Characters} or {@linkcode TextType.Grouping.Characters} */
  TextType.Characters = Based.Characters;
  /** @deprecated Use {@linkcode TextType.Based.CharacterExcludingSpaces} */
  TextType.CharacterExcludingSpaces = Based.CharacterExcludingSpaces;
  /** @deprecated Use {@linkcode TextType.Based.Words} */
  TextType.Words = Based.Words;
  /** @deprecated Use {@linkcode TextType.Based.Lines} */
  TextType.Lines = Based.Lines;
  /** @deprecated Use {@linkcode TextType.Grouping.Word} */
  TextType.Word = Grouping.Word;
  /** @deprecated Use {@linkcode TextType.Grouping.Line} */
  TextType.Line = Grouping.Line;
  /** @deprecated Use {@linkcode TextType.Grouping.All} */
  TextType.All = Grouping.All;
  /** @deprecated Use {@linkcode TextType.Justify.Left} */
  TextType.Left = Justify.Left;
  /** @deprecated Use {@linkcode TextType.Justify.Right} */
  TextType.Right = Justify.Right;
  /** @deprecated Use {@linkcode TextType.Justify.Center} */
  TextType.Center = Justify.Center;
  /** @deprecated Use {@linkcode TextType.Justify.WithLastLineLeft} */
  TextType.WithLastLineLeft = Justify.WithLastLineLeft;
  /** @deprecated Use {@linkcode TextType.Justify.WithLastLineRight} */
  TextType.WithLastLineRight = Justify.WithLastLineRight;
  /** @deprecated Use {@linkcode TextType.Justify.WithLastLineCenter} */
  TextType.WithLastLineCenter = Justify.WithLastLineCenter;
  /** @deprecated Use {@linkcode TextType.Justify.WithLastLineFull} */
  TextType.WithLastLineFull = Justify.WithLastLineFull;
  /** @deprecated Use {@linkcode TextType.Shape.Square} */
  TextType.Square = Shape.Square;
  /** @deprecated Use {@linkcode TextType.Shape.RampUp} */
  TextType.RampUp = Shape.RampUp;
  /** @deprecated Use {@linkcode TextType.Shape.RampDown} */
  TextType.RampDown = Shape.RampDown;
  /** @deprecated Use {@linkcode TextType.Shape.Triangle} */
  TextType.Triangle = Shape.Triangle;
  /** @deprecated Use {@linkcode TextType.Shape.Round} */
  TextType.Round = Shape.Round;
  /** @deprecated Use {@linkcode TextType.Shape.Smooth} */
  TextType.Smooth = Shape.Smooth;
  /** @deprecated Use {@linkcode TextType.FontPathOrigin.Local} */
  TextType.Local = FontPathOrigin.Local;
  /** @deprecated Use {@linkcode TextType.FontPathOrigin.CssUrl} */
  TextType.CssUrl = FontPathOrigin.CssUrl;
  /** @deprecated Use {@linkcode TextType.FontPathOrigin.ScriptUrl} */
  TextType.ScriptUrl = FontPathOrigin.ScriptUrl;
  /** @deprecated Use {@linkcode TextType.FontPathOrigin.FontUrl} */
  TextType.FontUrl = FontPathOrigin.FontUrl;
  /** @deprecated Use {@linkcode TextType.VerticalJustify.Top} */
  TextType.VerticalJustifyTop = VerticalJustify.Top;
  /** @deprecated Use {@linkcode TextType.VerticalJustify.Center} */
  TextType.VerticalJustifyCenter = VerticalJustify.Center;
  /** @deprecated Use {@linkcode TextType.VerticalJustify.Bottom} */
  TextType.VerticalJustifyBottom = VerticalJustify.Bottom;
  /** @deprecated Use {@linkcode TextType.RangeSelectorMode.Add} */
  TextType.Add = RangeSelectorMode.Add;
  /** @deprecated Use {@linkcode TextType.RangeSelectorMode.Subtract} */
  TextType.Subtract = RangeSelectorMode.Subtract;
  /** @deprecated Use {@linkcode TextType.RangeSelectorMode.Intersect} */
  TextType.Intersect = RangeSelectorMode.Intersect;
  /** @deprecated Use {@linkcode TextType.RangeSelectorMode.Min} */
  TextType.Min = RangeSelectorMode.Min;
  /** @deprecated Use {@linkcode TextType.RangeSelectorMode.Max} */
  TextType.Max = RangeSelectorMode.Max;
  /** @deprecated Use {@linkcode TextType.RangeSelectorMode.Difference} */
  TextType.Difference = RangeSelectorMode.Difference;
})(TextType || (TextType = {}));

var TrimMultipleShapes;
(function (TrimMultipleShapes) {
  TrimMultipleShapes.Individually = 1;
  TrimMultipleShapes.Simultaneously = 2;
  (function (VALUES) {
    VALUES.INDIVIDUALLY = TrimMultipleShapes.Individually;
    VALUES.SIMULTANEOUSLY = TrimMultipleShapes.Simultaneously;
  })(TrimMultipleShapes.VALUES || (TrimMultipleShapes.VALUES = {}));
})(TrimMultipleShapes || (TrimMultipleShapes = {}));

var LayerStyleType;
(function (LayerStyleType) {
  LayerStyleType.Stroke = 0;
  LayerStyleType.DropShadow = 1;
  LayerStyleType.InnerShadow = 2;
  LayerStyleType.OuterGlow = 3;
  LayerStyleType.InnerGlow = 4;
  LayerStyleType.BevelEmboss = 5;
  LayerStyleType.Satin = 6;
  LayerStyleType.ColorOverlay = 7;
  LayerStyleType.GradientOverlay = 8;
  (function (VALUE) {
    VALUE.STROKE = LayerStyleType.Stroke;
    VALUE.DROP_SHADOW = LayerStyleType.DropShadow;
    VALUE.INNER_SHADOW = LayerStyleType.InnerShadow;
    VALUE.OUTER_GLOW = LayerStyleType.OuterGlow;
    VALUE.INNER_GLOW = LayerStyleType.InnerGlow;
    VALUE.BEVEL_EMBOSS = LayerStyleType.BevelEmboss;
    VALUE.SATIN = LayerStyleType.Satin;
    VALUE.COLOR_OVERLAY = LayerStyleType.ColorOverlay;
    VALUE.GRADIENT_OVERLAY = LayerStyleType.GradientOverlay;
  })(LayerStyleType.VALUE || (LayerStyleType.VALUE = {}));
})(LayerStyleType || (LayerStyleType = {}));

export {
  BlendMode,
  Composite,
  EffectType,
  EffectValueType,
  FillRule,
  GradientType,
  LayerStyleType,
  LayerType,
  LineCap,
  LineJoin,
  MaskMode,
  MatteMode,
  PolyStarType,
  ShapeDirection,
  ShapeType,
  StrokeDashType,
  TextType,
  TrimMultipleShapes,
};
//# sourceMappingURL=index.js.map
